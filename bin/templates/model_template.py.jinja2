{% include "generated_code.py.jinja2" %}

from __future__ import annotations
from dataclasses import dataclass

{% for type in types if not type.is_generic() %}
{% if loop.first %}
from ..base import Model
{% endif %}
{% endfor %}

{% for type in types if type.is_generic() %}
{% if loop.first %}
from typing import Generic, Type, TypeVar
T = TypeVar("T")
{% endif %}
{% endfor %}

{% for type in types %}
@dataclass
class {{ type.name }}({% if type.is_generic() %}Generic[T]{% else %}Model["{{ type.name }}"]{% endif %}):
    {%- for prop in type.properties %}
    {{ prop.description | formatted_py_comment("#", 4) }}
    {%- if type.name == "NamedAPIResourceList" and prop.name == "results" %}
    {#- special case specifically for resource lists which do not have sensible generic info on the definition page #}
    results: List[NamedAPIResource[T]]
    {%- else %}
    {{ prop.name }}: {{ prop.type }} {%- if prop.name == "id" or prop.name == "pp" %} # pylint: disable=invalid-name {%- endif %}
    {%- endif %}
    {%- endfor %}
    {% if type.is_generic() %}
    # The type that this {{ type.name }} resolves to
    type: Type[T] | None = None
    {% endif %}

    {# special case for specifically NamedAPIResource #}
    {% if type.name == "NamedAPIResource" %}
    async def resolve(self) -> T:
        return await self.type.objects.get(name=self.name)
    {% endif %}
    {# special case for specificall APIResource #}
    {% if type.name == "APIResource" %}
    async def resolve(self) -> T:
        return await self.type.objects.get(url=self.url)
    {% endif %}
{% endfor %}

# import all type hints at of file to ensure no circular reference issues
# pylint: disable=wrong-import-position,wrong-import-order
{% include "imports.py.jinja2" %}
